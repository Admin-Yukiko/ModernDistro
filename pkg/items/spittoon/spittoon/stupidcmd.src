// Drop this in pkg/commands/test and compile it in scite then use .stupidcmd in game but be sure to look through the file for some basic stuff.

// You might be asking yourself, what the hell is this green text? Well my friend, this is what is referred to as
// a comment. There are two ways to comment a script or include file in escript. If you prepend a line of text, whether it be
// code or your own notes with a doube forward slash, the compiler will ignore this text and you can easily comment out code
// or leave notes for future self or others. DO NOT BE AFRAID TO USE COMMENTS. You will find more often than not that you wish
// you had commented code in the past. It is rahter lazy practice not to actually comment code, while others might frown upon over
// commented code, there is a benefit to it. But what of the second way to comment code? Prepending 7 lines of text with a double forward
// slash seems a bit dumb, can't I comment a block of text out?

/*
	Yes you can, and you do it thusly, Anything caught between a forward slash and asterisk and an asterisk
	and a forward slash will be commented out. This is particularly useful for commenting on what a function does
	I used toe // method throughout this script but I do use this way quite a bit in my own work as it makes commenting
	out blocks of code for quick testing a hell of a lot easier to revert back to should things not go according to plan.
	As well as for commenting on a function's purpose for being and what values it needs to be sent and what it returns.
*/
	
/*
	What follows is a bit of a nonsense script no one would ever write but it puts down some basics you may find useful. This was intended
	to be more of an empty test script but it turned into more of a "here is a few basics."
*/

// use? use what? This is confusing!
// These are modules which house different core functions you will need to call, it is advised to only call the modules you actually need
// in a script or include file rather than what I have done here which is call a bunch of them when I only actually need uo and os. You can
// familiarize yourself with what is in these modules by reviewing the offline documents file you downloaded.
use uo;
use os;
use cfgfile;
use math;
use attributes;
use basic;
use cliloc;
use util;
use vitals;

// Include files allow you to create functions that either complete tasks you may wish to use
// across different packages/scripts or store case statements that purely define a list of properties.
// Include files ONLY house functions and not programs. 
// Think of them as libraries, the house reference material which sometimes you occasionally visit to
// complete school work and other research oriented projects. 
// In programming functions allow you to keep your code tight by not having to repeat blocks of code to do
// the same tasks, you may get a different result but depending on the parameters you feed it but in the end
// it simplifies your code and cuts down on the potential to have errors in multiple places if you had to repeat
// the same code over and over again.
include "include/client";

program textcmd_test ( who )
	// You can look at SendSysMessage in the UO.em section of the documentation to see 
	// what this core function does
	SendSysMessage ( who, "This won't work.....", 0x3, 0x3B2 );
	Sleep ( 1 );
	SendSysMessage ( who, "It can't possibly work!!!!", 0x3, 0x3B2 );
	SleepMS ( 50 );
	SendSysMessage ( who, "Maybe it might just work....", 0x3, 0x3B2 );
	Sleep ( 1 );
	SendSysMessage ( who, "Amazing! I have turned into an ogre!" );
	SetObjProperty ( who, "Old_Graphic", who.graphic );
	who.graphic := 0x1;
	Sleep ( 10 );
	who.graphic := CInt ( GetObjProperty ( who, "Old_Graphic" ) );
	EraseObjProperty ( who, "Old_Graphic" );
	
	// This is one way to call a custom function, much like the built in core functions.
	// This method of doing it calls the function and stores the function's return value
	// in the variable 'solvethis' which you can then utilize.
	var solvethis := AddMyFuckingNumbers ( 714, 2136 );
	
	// " "+ : the plus sign outside a double quotes appends whatever is after it to the string 
	// (See comment in 'AddMyFuckingNumbers' function below to find out the basic premis of a string.)
	SendSysMessage ( who, "I have added you damn numbers: "+solvethis, 0x3, 0x42 );
	Sleep ( 1 );
	// Functions do not always need to return a value, in this instance it just does a simple task and
	// has no need of returning anything. In other programming languages such as Pascal this would be called
	// a Procedure but in escript it is a function, whether it returns something or not, they are referred to
	// as functions.
	SayMyName ( who );
	// You do not need to space out parenthesis either as I have done whhen calling functions, I just find it easier
	// to read but you could just as easily have something like the following.
	Sleep(1);
	SendSysMessage(who, "See? Even this works.");
endprogram

// Functions can also be defined in a script. The diffference between a function housed in a script and one
// in an include is that functions housed within a script are local, meaning only the script can access them
// and the functions within an include file can be accessed by any script that references the include file.
function AddMyFuckingNumbers ( firstnumber, secondnumber )
	// Cint ensures that the variables are Integers and not a string
	// It is important in any programming language to know that you are indeed
	// dealing with an integer or a string. These are universal terms and a quick
	// google search of "the difference between a string and integer in programming"
	// will yield a result such as this (I know cause I stole it from the first link on google):
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	// An integer is a variable that specifically holds a numerical value. Whereas a string is a
	// variable that can hold a range of characters (including numbers). Strings are usually enclosed 
	// in inverted commas like so: "This is a string." Where as Integers are just a number like so: 732
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	var equals := CInt(firstnumber) + CInt(secondnumber);
	return equals;	
endfunction

function SayMyName ( who )
	PrintTextAbove ( who, "My name is "+who.name );
endfunction