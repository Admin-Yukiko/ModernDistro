// Created 2017-07-04 21:44:26, with Gump Studio.
// Exported with POLGumpExporter ver 1.1 for gump pkg

use uo;
use os;
use cliloc;

include ":itemutils:itemUtil";
include "include/string";
include ":containers:containers";
include ":housing:housing";
include ":gumps:yesNo";
include ":itemutils:itemdesc";

//1152360 // <CENTER>Choose a banner:</CENTER>
program gump_gump( who, deed )
	
	//Sign stuff
	var sign := FindHouseSign (who);
	if(!sign)
		SendSysMessageCL(who, 500275, color := 33); // You can only build this in a house.
	return 0;
	endif	
	
	var InBackpack := useItem_check( who, deed, ITEM_INCONTAINER );
	if(!InBackpack)
		return 0;
	endif

	if (!ReserveItem (deed))
		SendSysMessageCL(who, 1042009, color := 33); // You cannot use this deed at this time.
		return 0;
	endif
	
	foreach item in ListItemsNearLocation (who.x, who.y, who.z, 1, who.realm)
 		if (item.IsDoor())
			SendSysMessageCL(who, 500271, color := 33); // You cannot build near the door.
			return;
  		endif
	endforeach
	
	SendSysMessageCL( who, 1042037, color := 66 ); // Where would you like to place this banner?
	var start := TargetCoordinates( who );
	if( !start )
		SendSysMessageCL( who, 1042021, color := 33 ); // Cancelled
		return 0;
	elseif( !CheckLosAt( who, CInt( start.x ), CInt( start.y ), CInt( start.z )))
		SendSysMessageCL( who, 500950, color := 33 ); // You cannot see that.
		return 0;
	elseif( !IsLocationWithinHouseSign (sign, start.x, start.y, start.z) )
		SendSysMessageCL( who, 500275, color := 33); // You can only build this in a house.
		return 0;
	endif
	BannerDeedGump( who, sign, deed, start );
endprogram

function BannerDeedGump( who, sign, deed, targ )
	var cfg_file := ReadConfigFile ( ":deed:bannerMenu" );
	var cfg_elem := FindConfigElem( cfg_file, "MenuGroupList" );
	var gump_title := GetConfigString ( cfg_elem, "Title" );
	var group_entries := GetConfigStringArray( cfg_elem, "Group" );
	var get_group, item_list, item_list_size, item_name;
	var gump := GFCreateGump ( 20,50 );
	
	GFPage ( gump, 0 );
	GFResizePic ( gump, 0, 0, 9200, 543, 295 );
	GFPicTiled ( gump, 10, 10, 523, 25, 2624 );
	GFAddAlphaRegion ( gump, 10, 10, 523, 25 );	
	// 1113302 - Center'd custom value string!
	GFAddHTMLLocalized ( gump, 10, 13, 523, 25, 1113302, 0, 0,  0x7FFF, gump_title ); 
	
// Category Background	
	GFPicTiled ( gump, 10, 45, 150, 240, 2624 );
	GFAddAlphaRegion ( gump, 10, 45, 150, 240 );
	
// Item List Background
	GFPicTiled ( gump, 170, 45, 363, 205, 2624 );
	GFAddAlphaRegion ( gump, 170, 45, 363, 205 );
	
// Item Scroll Button Background
	GFPicTiled ( gump, 170, 260, 363, 25, 2624 );
	GFAddAlphaRegion ( gump, 170, 260, 363, 25 );
	
	var Group_Y := 50;
	var Item_Y := 50;
	var Item_Page := 1;
	foreach group in ( group_entries )
		GFPage ( gump, 0 );
		GFAddButton ( gump, 15, Group_Y, 4005, 4007, GF_PAGE_BTN, Item_Page );
		GFAddHTMLLocalized ( gump, 47, Group_Y, 110, 20, 1114057, 0, 0,  0x7FFF, group );
		
		get_group := FindConfigElem ( cfg_file, group );
		item_list := GetConfigIntArray ( get_group, "Item" );
		item_list_size := item_list.size();
		Item_Y := 46;
		GFPage ( gump, Item_Page );
		foreach item in ( item_list )
			item_name := GetObjTypeDesc( item );
			GFAddButton ( gump, 175, Item_Y, 4005, 4007, GF_CLOSE_BTN, item );
			GFAddHTMLLocalized ( gump, 210, Item_Y, 320, 20, 1114057, 0, 0,  0x7FFF, item_name );
			Item_Y += 20;
			GFAddHTMLLocalized ( gump, 47, Group_Y, 110, 20, 1114057, 0, 0,  0x64, group );
			if ( _item_iter < item_list_size && Item_Y > 230 )
				GFAddButton ( gump, 500, 260, 4005, 4007, GF_PAGE_BTN, gump.cur_page+1 );
				GFAddHTMLLocalized( gump, 420, 263, 100, 18, 1044045, 0, 0, 0x7FFF ); // NEXT PAGE
				GFPage ( gump,  gump.cur_page+1 );
				GFAddButton ( gump, 175, 260, 4014, 4016, GF_PAGE_BTN, gump.cur_page-1 );
				GFAddHTMLLocalized( gump, 215, 263, 100, 18, 1044044, 0, 0, 0x7FFF ); // PREV PAGE
				Item_Y := 46;
			endif
			
		endforeach
		
		Group_Y += 20;
		
		Item_Page += 5;
	endforeach

	GFSendGump(who, gump);

endfunction