//////////////////////////////////////////////////////////
// This program file is here to use for creating little //
// pieces of code for testing purposes.					//
//////////////////////////////////////////////////////////


use uo;
use cfgfile;
use os;
use basic;
use cliloc;

include "include/findCity";
//include "include/myUtil";
//include "util/bank";
include ":currency:currency";
include "include/string";
//include ":gumps:gumpMessage";
//include ":staticHousing:staticHousing";
include "include/packets";
include ":clilocs:clilocs";

program testing(who, text)

	var polstruct := struct;
	polstruct := polstruct;
	text := text;
	who := who;
	//ReadPolCFG();
	ReadSSOptCFG();
	polstruct := GetGlobalProperty( "#PolCfgStruct");
	if(!polstruct)
		SendSysMessage(who, "Nope, not there!", 3, 88);
	endif
	SendSysMessage(who, "AssertionFailureAction = " + polstruct.AssertionFailureAction, 3, 88);
	SetGlobalProperty("PolCfgStruct", polstruct);
	return;


Function ReadPolCFG ()
Const GLOBAL_POL_CFG_STRUCT := "#PolCfgStruct";

  Var lines := ReadFile ("pol.cfg");
  if(lines.errortext)
	Broadcast("Server.inc --> Unable to read pol.cfg. Error is " + lines.errortext, 1, 33);
	return;
  endif
  Var pol := struct;
  ParseCfg (lines, pol);
  SetGlobalProperty ("#PolCfgStruct", pol);
  return pol;
EndFunction

Function ReadSSOptCFG ()
Const GLOBAL_SSOPT_CFG_STRUCT := "#ServSpecOptCfgStruct";

  Var lines := ReadFile ("config/servspecopt.cfg");
  if(lines.errortext)
	Broadcast("Server.inc --> Unable to read servspecopt.cfg. Error is " + lines.errortext, 1, 33);
	return;
  endif
  Var ssopt := struct;
  ParseCfg (lines, ssopt);
  SetGlobalProperty (GLOBAL_SSOPT_CFG_STRUCT, ssopt);
EndFunction

Function ParseCfg (lines, byref cfgstruct)
  Foreach line in lines
    line := Trim (line);
    If (line [1] in {"#", "/"})
      continue;
    EndIf
    var pos := Find (line, "=", 1);
    If (! Pos)
      pos := Find (line, cchr (32), 1); // blank
      If (! Pos)
      pos := Find (line, cchr (9), 1); //tab
      If (! Pos)
          continue;
        EndIf
      EndIf
    EndIf
    var value := Trim (line [pos + 1, len (line) -pos]);
    var tvalue := Lower (CStr (value)); // Numeric check
    If ((tvalue == Lower (CStr (CInt (tvalue)))) || (tvalue == Lower (CStr (Hex (CInt (tvalue))))))
      value := CInt (value);
    EndIf
    cfgstruct.insert (Trim (line [1, pos-1]), value);
  EndForEach
EndFunction

endprogram
