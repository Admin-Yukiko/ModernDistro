// //$Id: makeBlacksmithItems.src 1473 2009-03-12 01:26:41Z muaddib_pol $

use cfgfile;
use util;

include ":attributes:attributes";
include ":crafting:crafting";
include ":crafting:craftingRepair";
include ":crafting:toolWear";
include ":itemutils:itemUtil";
include ":itemutils:itemdesc";


var item_config     := ReadConfigFile(":*:itemdesc");
var craft_config    := ReadConfigFile(":blacksmithy:blacksmithy");

program use_SmithTool(who, tool)

	if ( !ReserveItem(tool) )
		SendSysMessage(who, "That is already in use.");
		return 0;
	elseif( (!tool.movable) || !ReserveItem(tool) )
		SendSysMessage(who, "You cannot use that");
		return 0;
	elseif( !tool in ListEquippedItems(who) )
		if( !(tool in EnumerateItemsInContainer(who.backpack)) )
			SendSysMessage(who, "That item is not in your backpack nor equipped.");
			return 0;
		endif
	endif

	EraseObjProperty(who, "#IsMeditating");
	EraseObjProperty(who, "#HealTimer");

	var rinfo := sendCraftGump(who, "Blacksmithy");

	// OK was pressed, close it on out
	if(rinfo == 0)
		return 0;
	endif

	var the_objtype := rinfo[1];
	var amt         := rinfo[2];
	var repairit    := rinfo[3];
	var resmeltit   := rinfo[4];

	if( repairit )
		repair_this(who, craft_skill);
		return 0;
	elseif( resmeltit )
		resmelt(who, craft_skill);
		return 0;
	endif

	makeBlacksmithItems(who, the_objtype, amt, tool);

endprogram

function makeBlacksmithItems(who, what, amt, tool)

	if( !what )
		SendSysMessage(who, "Cancelled");
		return 0;
	endif

	var anvil_near := 0;
	foreach item in ( ListItemsNearLocation(who.x, who.y, who.z, 3) )
		if( (item.objtype == 0xFAF) || (item.objtype == 0xFB0) )
			anvil_near := 1;
			break;
		endif
	endforeach
	if( anvil_near == 0 )
		SendSysMessage(who, "You must be near an anvil to smith items.");
		return 0;
	endif

	// Metal is sent for the ResourceList entry type.
	var itemchk := MaterialSelection(who, craft_skill, lower(craft_config[what].type));
	if( !itemchk )
		return 0;
	endif
	var use_on := itemchk[1];
	var ptmod := itemchk[3];

	var num, theitem;
	var itemname := craft_config[what].name;
	var material := Cint(craft_config[what].material);
	var reqd := Cint(craft_config[what].skill);
	var diff := Cint(craft_config[what].difficulty);
	var pts  := Cint(craft_config[what].points);
	pts      := CInt(pts + ptmod);
	var counter := 0, x := who.x, y := who.y;

	while( counter < amt )
		if( (who.x != x) || (who.y != y) )
			SendSysMessage(who, "You stop smithing.");
			break;
		elseif( !tool )
			break;
		endif

		Sleep(2);

		if( GetAmount(use_on) >= material )
			if( CraftCheckSkill(who, craft_skill, diff, pts) )
				theitem := CreateCraftItem(who, craft_skill, use_on, use_on.objtype, what, material, itemname, reqd);
				if( TypeOf(theitem) != "ItemRef" )
					SubtractAmount(use_on, (material / 2));
					SendSysMessage(who, "You failed to create the item, and some of your materials are lost.");
					counter := counter + 1;
					continue;
				else
					AddAnyMods(material, theitem);
				endif
			else
				num := CInt(randomint(material)/2) + 1;
				if(SubtractAmount(use_on, num))
					SendSysMessage(who, "You lost some metal");
				endif
			endif
			CheckToolWear (who, tool, craft_skill);
		else
			SendSysMessage(who, "You don't have the resources required to make that item.");
			return 0;
		endif
		counter := counter + 1;
	endwhile

	return 0;

endfunction

function AddAnyMods(material_objtype, an_item)

	var material_ref := GetItemDescInfo(material_objtype);
	// Damages
	if(an_item.IsA(POLCLASS_WEAPON))
		an_item.damage_cold_mod := CInt(material_ref.ColdDamage);
		an_item.damage_energy_mod := CInt(material_ref.EnergyDamage);
		an_item.damage_fire_mod := CInt(material_ref.FireDamage);
		an_item.damage_physical_mod := CInt(material_ref.PhysicalDamage);
		an_item.damage_poison_mod := CInt(material_ref.PoisonDamage);
	endif
	
	// Resistances
	if(an_item.IsA(POLCLASS_ARMOR))
		an_item.resist_cold_mod := CInt(material_ref.ColdResist);
		an_item.resist_energy_mod := CInt(material_ref.EnergyResist);
		an_item.resist_fire_mod := CInt(material_ref.FireResist);
		an_item.resist_physical_mod := CInt(material_ref.PhysicalResist);
		an_item.resist_poison_mod := CInt(material_ref.PoisonResist);
	endif

	return 1;
endfunction


